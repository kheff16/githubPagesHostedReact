{"ast":null,"code":"var _jsxFileName = \"/app/src/App.jsx\";\nimport { Component } from \"react\";\nimport \"./App.css\";\nimport Compose from \"./components/Compose\";\nimport LoginForm from \"./components/LoginForm\";\nimport MessageList from \"./components/MessageList\";\nimport UserList from \"./components/UserList\";\nimport { Grid, Paper, AppBar } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userList: [],\n      events: [],\n      username: \"\",\n      password: \"\",\n      needToLogin: true,\n      streamToken: \"\",\n      header: 'Chat',\n      composePlaceholder: 'Enter a message to send'\n    };\n    this.serve = this.serve.bind(this);\n    this.login = this.login.bind(this);\n    this.setUsername = this.setUsername.bind(this);\n    this.setPassword = this.setPassword.bind(this);\n  }\n\n  login() {\n    var request = new XMLHttpRequest();\n    var form = new FormData();\n    form.append(\"password\", this.state.password);\n    form.append(\"username\", this.state.username);\n    request.open(\"POST\", process.env.REACT_APP_BASE_URL + \"/login\");\n    var that = this;\n\n    request.onreadystatechange = function () {\n      if (this.readyState !== 4) return;\n\n      if (this.status === 201) {\n        const data = JSON.parse(this.responseText);\n        sessionStorage.setItem('messageToken', data.message_token);\n        that.setState({\n          password: \"\",\n          username: \"Loading...\",\n          streamToken: data.stream_token\n        });\n        that.serve();\n      } else if (this.status === 403) {\n        alert(\"Invalid username or password\");\n      } else if (this.status === 409) {\n        alert(that.state.username + \" is already logged in\");\n      } else {\n        alert(this.status + \" failure to /login\");\n      }\n    };\n\n    request.send(form);\n  }\n\n  serve() {\n    const server = new EventSource(`${process.env.REACT_APP_BASE_URL}/stream/${this.state.streamToken}`);\n    server.addEventListener(\"Part\", event => {\n      event = { ...JSON.parse(event.data),\n        type: 'Part'\n      };\n      var temp = this.state.userList;\n      temp.splice(this.state.userList.indexOf(event.user), 1);\n      this.setState({\n        userList: temp,\n        events: [...this.state.events, event]\n      });\n    }, false);\n    server.addEventListener(\"open\", event => {\n      this.setState({\n        username: \"\",\n        needToLogin: false\n      });\n    }, false);\n    server.addEventListener(\"Message\", event => {\n      var data = { ...JSON.parse(event.data),\n        type: 'Message'\n      };\n      this.setState({\n        events: [...this.state.events, data]\n      });\n    }, false);\n    server.addEventListener(\"Join\", event => {\n      var data = JSON.parse(event.data);\n      var santizedData = { ...data,\n        type: 'Join',\n        needToLogin: false\n      };\n      this.setState({\n        header: 'Chat',\n        events: [...this.state.events, santizedData]\n      });\n\n      if (this.state.userList.includes(data.user)) {\n        this.setState({\n          header: 'Chat'\n        });\n        return;\n      }\n\n      this.setState({\n        userList: [...this.state.userList, data.user]\n      });\n    }, false);\n    server.addEventListener(\"Disconnect\", () => {\n      server.close();\n      this.disconnect();\n      this.setState({\n        events: []\n      });\n    }, false);\n    server.addEventListener(\"ServerStatus\", event => {\n      var parsedEvent = JSON.parse(event.data);\n      var santizedData = {\n        message: parsedEvent.status,\n        created: parsedEvent.created,\n        type: 'Status'\n      };\n      this.setState({\n        events: [...this.state.events, santizedData]\n      });\n    }, false);\n    server.addEventListener(\"Users\", event => {\n      this.setState({\n        userList: JSON.parse(event.data).users\n      });\n    }, false);\n    server.addEventListener(\"error\", event => {\n      if (event.target.readyState === 2) {\n        this.disconnect();\n      } else {\n        this.setState({\n          header: \"Disconnected, retrying\"\n        });\n        console.log(\"Disconnected, retrying\");\n      }\n    }, false);\n\n    server.onerror = _event => {\n      console.log(\"Connection lost, reestablishing\");\n    };\n  }\n\n  setUsername(value) {\n    this.setState({\n      username: value\n    });\n  }\n\n  setPassword(value) {\n    this.setState({\n      password: value\n    });\n  }\n\n  disconnect() {\n    this.setState({\n      needToLogin: true,\n      messageToken: \"\",\n      streamToken: \"\",\n      userList: []\n    });\n  }\n\n  render() {\n    return this.state.needToLogin ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(AppBar, {\n          style: {\n            textAlign: 'center'\n          },\n          children: 'Log In to View Chat'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Not logged in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n        setUsername: this.setUsername,\n        setPassword: this.setPassword,\n        needToLogin: this.state.needToLogin,\n        serve: this.serve,\n        login: this.login,\n        username: this.state.username,\n        password: this.state.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(AppBar, {\n          style: {\n            textAlign: 'center'\n          },\n          children: this.state.header\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n        setUsername: this.setUsername,\n        setPassword: this.setPassword,\n        needToLogin: this.state.needToLogin,\n        serve: this.serve,\n        login: this.login,\n        username: this.state.username,\n        password: this.state.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        mt: 2,\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            style: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              flexDirection: 'column'\n            },\n            children: [/*#__PURE__*/_jsxDEV(MessageList, {\n              events: this.state.events\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Compose, {\n              needToLogin: this.state.needToLogin\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            children: /*#__PURE__*/_jsxDEV(UserList, {\n              userList: this.state.userList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/app/src/App.jsx"],"names":["Component","Compose","LoginForm","MessageList","UserList","Grid","Paper","AppBar","App","constructor","props","state","userList","events","username","password","needToLogin","streamToken","header","composePlaceholder","serve","bind","login","setUsername","setPassword","request","XMLHttpRequest","form","FormData","append","open","process","env","REACT_APP_BASE_URL","that","onreadystatechange","readyState","status","data","JSON","parse","responseText","sessionStorage","setItem","message_token","setState","stream_token","alert","send","server","EventSource","addEventListener","event","type","temp","splice","indexOf","user","santizedData","includes","close","disconnect","parsedEvent","message","created","users","target","console","log","onerror","_event","value","messageToken","render","textAlign","display","flexWrap","flexDirection"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport \"./App.css\";\nimport Compose from \"./components/Compose\";\nimport LoginForm from \"./components/LoginForm\";\nimport MessageList from \"./components/MessageList\";\nimport UserList from \"./components/UserList\"\nimport { Grid, Paper, AppBar } from '@mui/material'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userList: [],\n      events: [],\n      username:\"\",\n      password:\"\",\n      needToLogin: true,\n      streamToken: \"\",\n      header: 'Chat',\n      composePlaceholder: 'Enter a message to send'\n    }\n    this.serve = this.serve.bind(this)\n    this.login = this.login.bind(this)\n    this.setUsername = this.setUsername.bind(this)\n    this.setPassword = this.setPassword.bind(this)\n  }\n\n\n    login() {\n      var request = new XMLHttpRequest();\n      var form = new FormData();\n      form.append(\"password\", this.state.password);\n      form.append(\"username\", this.state.username);\n      request.open(\"POST\", process.env.REACT_APP_BASE_URL + \"/login\");\n      var that = this;\n      request.onreadystatechange = function() {\n          if (this.readyState !== 4) return;\n          if (this.status === 201) {\n              const data = JSON.parse(this.responseText);\n              sessionStorage.setItem('messageToken', data.message_token)\n              that.setState({\n                password: \"\",\n                username: \"Loading...\", \n                streamToken: data.stream_token,\n              })\n              that.serve();\n          } else if (this.status === 403) {\n              alert(\"Invalid username or password\");\n          } else if (this.status === 409) {\n              alert(that.state.username + \" is already logged in\");\n          } else {\n              alert(this.status + \" failure to /login\");\n          }\n      };\n      request.send(form);\n    }\n\n    serve(){\n      const server = new EventSource(`${process.env.REACT_APP_BASE_URL}/stream/${this.state.streamToken}`);\n      server.addEventListener(\"Part\", (event) =>{\n        event = {...JSON.parse(event.data), type: 'Part'}\n        var temp = this.state.userList\n        temp.splice(this.state.userList.indexOf(event.user), 1)\n        this.setState({userList: temp, \n          events: [...this.state.events, event]})\n      }, false)\n      server.addEventListener(\"open\", (event) =>{\n        this.setState({username: \"\", needToLogin: false})\n      }, false)\n      server.addEventListener(\"Message\", (event) => {\n        var data = {...JSON.parse(event.data), type: 'Message'}\n        this.setState({events: [...this.state.events, data]})\n      }, false);\n      server.addEventListener(\"Join\", (event) => {\n        var data = JSON.parse(event.data);\n        var santizedData = {...data, type: 'Join', needToLogin: false}\n        this.setState({header: 'Chat', events: [...this.state.events, santizedData]})\n        if(this.state.userList.includes(data.user)) { this.setState({header: 'Chat'}); return}\n        this.setState({userList: [...this.state.userList, data.user]});\n      }, false);\n      server.addEventListener(\n        \"Disconnect\",\n        () => {\n            server.close();\n            this.disconnect()\n            this.setState({events: []})\n        },\n        false\n    );\n      server.addEventListener(\"ServerStatus\", (event) => {\n        var parsedEvent = JSON.parse(event.data)\n        var santizedData = {message: parsedEvent.status, created: parsedEvent.created, type: 'Status'}\n        this.setState({events: [...this.state.events, santizedData]})\n      }, false);\n      server.addEventListener(\"Users\", (event => {\n        this.setState({ userList: JSON.parse(event.data).users})\n      }), false);\n      server.addEventListener(\n        \"error\",\n        (event) => {\n            if (event.target.readyState === 2) {\n                this.disconnect();\n            } else {\n                this.setState({header: \"Disconnected, retrying\"})\n                console.log(\"Disconnected, retrying\");\n            }\n        },\n        false\n    );\n      server.onerror = (_event) => {\n        console.log(\"Connection lost, reestablishing\");\n      };\n    }\n\n    setUsername(value){\n      this.setState({username: value})\n    }\n\n    setPassword(value){\n      this.setState({password: value})\n    }\n\n    disconnect(){\n      this.setState({needToLogin: true, messageToken: \"\", streamToken: \"\", userList: []})\n    }\n\n\n  render() {\n\n    return this.state.needToLogin? ( \n      <>\n        <header>\n          <AppBar style={{textAlign: 'center'}}>{'Log In to View Chat'}</AppBar>\n        </header>\n        <p>Not logged in</p>\n        <LoginForm setUsername={this.setUsername} setPassword={this.setPassword} needToLogin={this.state.needToLogin} serve={this.serve} login={this.login} username={this.state.username} password={this.state.password}/>\n      </>\n      ) : (\n      <>\n        <header>\n          <AppBar style={{textAlign: 'center'}}>{this.state.header}</AppBar>\n        </header>\n        <LoginForm setUsername={this.setUsername} setPassword={this.setPassword} needToLogin={this.state.needToLogin} serve={this.serve} login={this.login} username={this.state.username} password={this.state.password}/>\n        <Grid mt={2} container spacing={2}>\n          <Grid item xs={8} md={8}>\n            <Paper style={{display: 'flex', flexWrap: 'wrap', flexDirection: 'column'}}>\n              <MessageList events={this.state.events}/>\n              <Compose needToLogin={this.state.needToLogin}/>\n            </Paper>\n          </Grid>\n          <Grid item xs={4} md={4}>\n            <Paper >\n              <UserList userList={this.state.userList} />\n            </Paper>\n          </Grid>\n        </Grid>\n      </>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}